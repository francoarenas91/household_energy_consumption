rm(list = ls())
##carga paquetes
PAQUETES <- c("dplyr","tidyverse","ggplot2","here","arrow","lubridate","readxl","randomForest","doParallel","caret")
for (el in PAQUETES){
if (!require(el, character.only = TRUE)) {
install.packages(el, repos = "https://cloud.r-project.org")
require(el, character.only = TRUE)
}
}
rm(PAQUETES, el)
path<-here()
setwd(path)
setwd(path)
selected_features <- read_excel("~/GitHub/household_energy_consumption/data/data_dictionary.xlsx",sheet=3) %>% pull()
house_static_data <- read_parquet("https://intro-datascience.s3.us-east-2.amazonaws.com/SC-data/static_house_info.parquet") %>%
select(bldg_id,selected_features) %>%
select(where(~length(unique(.)) > 1))
house_static_data %>%
mutate(across(where(is.character),as.factor)) %>%
mutate(across(where(is.factor), as.numeric)) %>%
mutate(county_id=house_static_data$in.county)->encoded_house_data #I need the county id in code for the join
temperature <-read_csv("~/GitHub/household_energy_consumption/data/temperature.csv") %>%
rename(time=date_time)
energy<- read_csv("C:/Users/franc/OneDrive/MADS/IST687/final_project/electricity_consumption.csv") %>%
sample_frac(0.05)
selected_importance_names<-readRDS("~/GitHub/household_energy_consumption/selected_importance_names.RDS")
data <-read_csv("C:/Users/franc/OneDrive/MADS/IST687/final_project/electricity_consumption.csv") %>%
# sample_frac(.25) %>%
left_join(encoded_house_data,by="bldg_id") %>%
left_join(temperature,by=c("county_id","time"))#join with encoded data
data %>%
select(-bldg_id,-county_id) %>% #remove the id and the county in code
mutate(day = day(time)) %>%
mutate(day_of_week = as.numeric(factor(wday(time, label = TRUE)))) %>%
filter(!is.na(temperature)) %>%  #drop the counties where I do not have the temperature
select(-time) %>%
select(selected_importance_names,total_electricity)-> data
data %>%
select(-bldg_id,-county_id) %>% #remove the id and the county in code
mutate(day = day(time)) %>%
mutate(day_of_week = as.numeric(factor(wday(time, label = TRUE)))) %>%
filter(!is.na(temperature)) %>%  #drop the counties where I do not have the temperature
mutate(hour=factor(hour(time))) %>%
select(-time) %>%
select(selected_importance_names,total_electricity)-> data
View(data)
house_static_data %>%
mutate(across(where(is.character),as.factor)) %>%
# mutate(across(where(is.factor), as.numeric)) %>%
mutate(in.cooling_setpoint=as.numeric(substr(in.cooling_setpoint,1,2))) %>% #convert to number
mutate(in.cooling_setpoint_offset_magnitude=as.numeric(substr(in.cooling_setpoint_offset_magnitude,1,1))) %>% #convert to number
mutate(in.cooling_setpoint_offset_period = factor(str_extract(in.cooling_setpoint_offset_period, "^[^-+]*"))) %>%  #reomve the ofset magnitude as it is in another column
mutate(county_id=house_static_data$in.county)->encoded_house_data #I need the county id in code for the join
selected_importance_names<-readRDS("~/GitHub/household_energy_consumption/selected_importance_names.RDS")
data <-read_csv("C:/Users/franc/OneDrive/MADS/IST687/final_project/electricity_consumption.csv") %>%
# sample_frac(.25) %>%
left_join(encoded_house_data,by="bldg_id") %>%
left_join(temperature,by=c("county_id","time"))#join with encoded data
data %>%
select(-bldg_id,-county_id) %>% #remove the id and the county in code
mutate(day = day(time)) %>%
mutate(day_of_week = as.numeric(factor(wday(time, label = TRUE)))) %>%
filter(!is.na(temperature)) %>%  #drop the counties where I do not have the temperature
mutate(hour=factor(hour(time))) %>%
select(-time) %>%
select(selected_importance_names,total_electricity)-> data
View(data)
rm(list = ls())
##carga paquetes
PAQUETES <- c("dplyr","tidyverse","ggplot2","here","arrow","lubridate","readxl","randomForest","plm","caret")
for (el in PAQUETES){
if (!require(el, character.only = TRUE)) {
install.packages(el, repos = "https://cloud.r-project.org")
require(el, character.only = TRUE)
}
}
rm(PAQUETES, el)
path<-here()
setwd(path)
house_static_data <- read_parquet("https://intro-datascience.s3.us-east-2.amazonaws.com/SC-data/static_house_info.parquet") %>%
select(bldg_id,in.county) %>%
rename(county_id=in.county)
temperature <-read_csv("~/GitHub/household_energy_consumption/data/temperature.csv") %>%
rename(time=date_time)
data <-read_csv("C:/Users/franc/OneDrive/MADS/IST687/final_project/electricity_consumption.csv") %>%
# sample_frac(.20) %>%
left_join(house_static_data,by="bldg_id") %>%
left_join(temperature,by=c("county_id","time"))#join with encoded data
temperature <-read_csv("~/GitHub/household_energy_consumption/data/temperature.csv") %>%
rename(time=date_time)
data <-read_csv("C:/Users/franc/OneDrive/MADS/IST687/final_project/electricity_consumption.csv")
rm(list = ls())
##carga paquetes
PAQUETES <- c("dplyr","tidyverse","ggplot2","here","arrow","lubridate","readxl","randomForest","plm","caret")
for (el in PAQUETES){
if (!require(el, character.only = TRUE)) {
install.packages(el, repos = "https://cloud.r-project.org")
require(el, character.only = TRUE)
}
}
rm(PAQUETES, el)
path<-here()
setwd(path)
house_static_data <- read_parquet("https://intro-datascience.s3.us-east-2.amazonaws.com/SC-data/static_house_info.parquet") %>%
select(bldg_id,in.county) %>%
rename(county_id=in.county)
temperature <-read_csv("~/GitHub/household_energy_consumption/data/temperature.csv") %>%
rename(time=date_time)
data <-read_csv("C:/Users/franc/OneDrive/MADS/IST687/final_project/electricity_consumption.csv") %>%
# sample_frac(.20) %>%
left_join(house_static_data,by="bldg_id") %>%
left_join(temperature,by=c("county_id","time"))#join with encoded data
View(data)
data <-read_csv("C:/Users/franc/OneDrive/MADS/IST687/final_project/electricity_consumption.csv") %>%
# sample_frac(.20) %>%
left_join(house_static_data,by="bldg_id") %>%
left_join(temperature,by=c("county_id","time")) %>% #join with encoded data
group_by(county_id,time) %>%
summarise(
total_electricity=sum(total_electricity),
temperature = mean(temeprature)
)
data <-read_csv("C:/Users/franc/OneDrive/MADS/IST687/final_project/electricity_consumption.csv") %>%
# sample_frac(.20) %>%
left_join(house_static_data,by="bldg_id") %>%
left_join(temperature,by=c("county_id","time")) %>% #join with encoded data
group_by(county_id,time) %>%
summarise(
total_electricity=sum(total_electricity),
temperature = mean(temperature)
)
panel_data <- pdata.frame(data, index = c("county_id", "time"))
rm(data)
#run a fixed effects model
panel_model <- plm(total_electricity ~ temperature,
data = panel_data,
model = "within")
summary(fe_model)
#run a fixed effects model
panel_model <- plm(total_electricity ~ temperature,
data = panel_data,
model = "within")
summary(fe_model)
summary(panel_model)
View(panel_data)
knitr::opts_chunk$set(echo = TRUE)
plot_data <-read_csv("C:/Users/franc/OneDrive/MADS/IST687/final_project/electricity_consumption.csv") %>%
# sample_frac(.20) %>%
left_join(house_static_data,by="bldg_id") %>%
left_join(temperature,by=c("county_id","time")) %>% #join with encoded data
select(c(bldg_id,temperature,total_electricity)) %>%
group_by(county_id,time) %>%
summarise(
total_electricity=sum(total_electricity),
temperature = mean(temperature)
)
plot_data <-read_csv("C:/Users/franc/OneDrive/MADS/IST687/final_project/electricity_consumption.csv") %>%
# sample_frac(.20) %>%
left_join(house_static_data,by="bldg_id") %>%
left_join(temperature,by=c("county_id","time")) %>% #join with encoded data
select(c(bldg_id,temperature,total_electricity,county_id,time)) %>%
group_by(county_id,time) %>%
summarise(
total_electricity=sum(total_electricity),
temperature = mean(temperature)
)
View(plot_data)
plot_data %>%
filter(county_id==county) %>%
ggplot(aes(x=temperature,y=total_electricity)) +
geom_point()
plot_data <-read_csv("C:/Users/franc/OneDrive/MADS/IST687/final_project/electricity_consumption.csv") %>%
# sample_frac(.20) %>%
left_join(house_static_data,by="bldg_id") %>%
left_join(temperature,by=c("county_id","time")) %>% #join with encoded data
select(c(bldg_id,temperature,total_electricity,county_id,time)) %>%
group_by(county_id,time) %>%
summarise(
total_electricity=sum(total_electricity),
temperature = mean(temperature)
)
for (county in plot_data$county_id[1:5]){
plot_data %>%
filter(county_id==county) %>%
ggplot(aes(x=temperature,y=total_electricity)) +
geom_point()
}
plot_data %>%
filter(county_id==county) %>%
ggplot(aes(x=temperature,y=total_electricity)) +
geom_point()
house_static_data <- read_parquet("https://intro-datascience.s3.us-east-2.amazonaws.com/SC-data/static_house_info.parquet") %>%
select(bldg_id,in.county) %>%
rename(county_id=in.county)
temperature <-read_csv("~/GitHub/household_energy_consumption/data/temperature.csv") %>%
rename(time=date_time)
data <-read_csv("C:/Users/franc/OneDrive/MADS/IST687/final_project/electricity_consumption.csv") %>%
# sample_frac(.20) %>%
left_join(house_static_data,by="bldg_id") %>%
left_join(temperature,by=c("county_id","time")) %>% #join with encoded data
group_by(county_id,time) %>%
summarise(
total_electricity=sum(total_electricity),
temperature = mean(temperature)
)
data %>%
mutate(day = day(time)) %>%
mutate(day_of_week = as.numeric(factor(wday(time, label = TRUE)))) %>%
filter(!is.na(temperature)) %>%  #drop the counties where I do not have the temperature
mutate(hour=factor(hour(time))) %>%
select(-time) -> data_times
View(data_times)
lm_model_dates <- lm(total_electricity,.data=data_times)
View(data_times)
View(data_times)
lm_model_dates <- lm(total_electricity,.data=data_times)
lm_model_dates <- lm(total_electricity~.,data=data_times)
summary(lm_model_dates)
data %>%
mutate(day = factor(day(time))) %>%
mutate(day_of_week = factor(wday(time, label = TRUE))) %>%
filter(!is.na(temperature)) %>%  #drop the counties where I do not have the temperature
mutate(hour=factor(hour(time))) %>%
select(-time) -> data_times
lm_model_dates <- lm(total_electricity~.,data=data_times)
summary(lm_model_dates)
View(data_times)
data %>%
mutate(day = factor(day(time))) %>%
mutate(day_of_week = wday(time, label = TRUE)) %>%
filter(!is.na(temperature)) %>%  #drop the counties where I do not have the temperature
mutate(hour=factor(hour(time))) %>%
select(-time) -> data_times
View(data_times)
data %>%
mutate(day = factor(day(time))) %>%
mutate(day_of_week = factor(as.numeric(wday(time, label = TRUE)))) %>% #start in sunday
filter(!is.na(temperature)) %>%  #drop the counties where I do not have the temperature
mutate(hour=factor(hour(time))) %>%
select(-time) -> data_times
View(data_times)
data %>%
mutate(day = factor(day(time))) %>%
mutate(day_of_week = factor(as.numeric(wday(time, label = TRUE)))) %>% #start in sunday
filter(!is.na(temperature)) %>%  #drop the counties where I do not have the temperature
mutate(hour=factor(hour(time))) %>%
select(-time) -> data_times
lm_model_dates <- lm(total_electricity~.,data=data_times)
summary(lm_model_dates)
data %>%
mutate(day = factor(day(time))) %>%
mutate(day_of_week = factor(as.numeric(wday(time, label = TRUE)))) %>% #start in sunday
filter(!is.na(temperature)) %>%  #drop the counties where I do not have the temperature
mutate(hour=factor(hour(time))) %>%
select(-day) %>% #colinear with day of the week
select(-time) -> data_times
lm_model_dates <- lm(total_electricity~.,data=data_times)
summary(lm_model_dates)
house_static_data <- read_parquet("https://intro-datascience.s3.us-east-2.amazonaws.com/SC-data/static_house_info.parquet") %>%
select(bldg_id,in.county) %>%
rename(county_id=in.county)
temperature <-read_csv("~/GitHub/household_energy_consumption/data/temperature.csv") %>%
rename(time=date_time)
data <-read_csv("C:/Users/franc/OneDrive/MADS/IST687/final_project/electricity_consumption.csv") %>%
# sample_frac(.20) %>%
left_join(house_static_data,by="bldg_id") %>%
left_join(temperature,by=c("county_id","time")) %>% #join with encoded data
group_by(county_id,time) %>%
summarise(
total_electricity=sum(total_electricity),
temperature = mean(temperature)
) %>%
mutate(total_electricity=log(total_electricity)) #log transformation so the betas are interpreted as percentage increase/decrease
panel_data <- pdata.frame(data, index = c("county_id", "time"))
#run a fixed effects model
panel_model <- plm(total_electricity ~ temperature,
data = panel_data,
model = "within")
summary(panel_model)
data %>%
mutate(day = factor(day(time))) %>%
mutate(day_of_week = factor(as.numeric(wday(time, label = TRUE)))) %>% #start in sunday
filter(!is.na(temperature)) %>%  #drop the counties where I do not have the temperature
mutate(hour=factor(hour(time))) %>%
select(-day) %>% #colinear with day of the week
select(-time)-> data_times
lm_model_dates <- lm(total_electricity~.,data=data_times)
summary(lm_model_dates)
set.seed(123)  # for reproducibility
trainIndex <- createDataPartition(data$Response, p = .8,
list = FALSE,
times = 1)
set.seed(123)  # for reproducibility
trainIndex <- createDataPartition(data$total_electricity, p = .8,
list = FALSE,
times = 1)
dataTrain <- data[ trainIndex,]
dataTest  <- data[-trainIndex,]
train_control <- trainControl(method = "cv", number = 10)
set.seed(123)  # for reproducibility
trainIndex <- createDataPartition(data_times$total_electricity, p = .8,
list = FALSE,
times = 1)
dataTrain <- data[ trainIndex,]
dataTest  <- data[-trainIndex,]
train_control <- trainControl(method = "cv", number = 10)
# Train a linear regression model on the training set
model <- train(total_electricity ~ ., data = dataTrain, method = "lm", trControl = train_control)
data %>%
mutate(day = factor(day(time))) %>%
mutate(day_of_week = factor(as.numeric(wday(time, label = TRUE)))) %>% #start in sunday
filter(!is.na(temperature)) %>%  #drop the counties where I do not have the temperature
mutate(hour=factor(hour(time))) %>%
select(-day) %>% #colinear with day of the week
select(-time)-> data_times
lm_model_dates <- lm(total_electricity~.,data=data_times)
summary(lm_model_dates)
set.seed(123)  # for reproducibility
trainIndex <- createDataPartition(data_times$total_electricity, p = .8,
list = FALSE,
times = 1)
dataTrain <- data[ trainIndex,]
dataTest  <- data[-trainIndex,]
train_control <- trainControl(method = "cv", number = 10)
# Train a linear regression model on the training set
model <- train(total_electricity ~ ., data = dataTrain, method = "lm", trControl = train_control)
data_times %>% is.na() %>% apply(1,fun=sum)
data_times %>% is.na() %>% apply(1,FUN=sum)
data_times %>% is.na() %>% apply(2,FUN=sum)
# Train a linear regression model on the training set
model <- train(total_electricity ~ ., data = dataTrain, method = "lm", trControl = train_control)
dataTrain %>% is.na() %>% apply(2,FUN=sum)
set.seed(123)  # for reproducibility
trainIndex <- createDataPartition(data_times$total_electricity, p = .8,
list = FALSE,
times = 1)
dataTrain <- data_times[ trainIndex,]
dataTest  <- data_times[-trainIndex,]
train_control <- trainControl(method = "cv", number = 10)
# Train a linear regression model on the training set
model <- train(total_electricity ~ ., data = dataTrain, method = "lm", trControl = train_control)
# Print the results
print(model)
# Make predictions on the test set
predictions <- predict(model, newdata = dataTest)
# Calculate performance metrics on the test set
postResample(pred = predictions, obs = dataTest$Response)
# Train a linear regression model on the training set
model <- train(total_electricity ~ ., data = dataTrain, method = "lm", trControl = train_control)
# Print the results
print(model)
# Make predictions on the test set
predictions <- predict(model, newdata = dataTest)
# Calculate performance metrics on the test set
postResample(pred = predictions, obs = dataTest$total_electricity)
# Train a linear regression model on the training set
lm_model <- train(total_electricity ~ ., data = dataTrain, method = "lm", trControl = train_control)
# Print the results
print(lm_model)
# Make predictions on the test set
predictions <- predict(lm_model, newdata = dataTest)
# Calculate performance metrics on the test set
postResample(pred = predictions, obs = dataTest$total_electricity)
View(data_times)
data_squared <- data_times %>%
mutate(sqr_temperature=temperature^2)
trainIndex <- createDataPartition(data_times$total_electricity, p = .8,
list = FALSE,
times = 1)
dataTrain <- data_times[ trainIndex,]
dataTest  <- data_times[-trainIndex,]
# Train a linear regression model on the training set
sq_lm_model <- train(total_electricity ~ ., data = dataTrain, method = "lm", trControl = train_control)
# Print the results
print(sq_lm_model)
# Make predictions on the test set
predictions <- predict(lsq_m_model, newdata = dataTest)
# Make predictions on the test set
predictions <- predict(sq_lm_model, newdata = dataTest)
# Calculate performance metrics on the test set
postResample(pred = predictions, obs = dataTest$total_electricity)
# check coefficients and p-values to see if the square term is significant
coefficients_table <- model_summary$coefficients
# Print the results
summary(sq_lm_model)
# Train a linear regression model on the training set
lm_model <- train(total_electricity ~ ., data = dataTrain, method = "lm", trControl = train_control)
# Print the results
summary(lm_model)
# Make predictions on the test set
predictions <- predict(lm_model, newdata = dataTest)
# Calculate performance metrics on the test set
postResample(pred = predictions, obs = dataTest$total_electricity)
data_squared <- data_times %>%
mutate(sqr_temperature=temperature^2)
trainIndex <- createDataPartition(data_times$total_electricity, p = .8,
list = FALSE,
times = 1)
dataTrain <- data_times[ trainIndex,]
dataTest  <- data_times[-trainIndex,]
# Train a linear regression model on the training set
sq_lm_model <- train(total_electricity ~ ., data = dataTrain, method = "lm", trControl = train_control)
# Print the results
summary(sq_lm_model)
# Make predictions on the test set
predictions <- predict(sq_lm_model, newdata = dataTest)
# Calculate performance metrics on the test set
postResample(pred = predictions, obs = dataTest$total_electricity)
data_squared <- data_times %>%
mutate(sqr_temperature=temperature^2)
trainIndex <- createDataPartition(data_squared$total_electricity, p = .8,
list = FALSE,
times = 1)
dataTrain <- data_times[ trainIndex,]
dataTest  <- data_times[-trainIndex,]
# Train a linear regression model on the training set
sq_lm_model <- train(total_electricity ~ ., data = dataTrain, method = "lm", trControl = train_control)
# Print the results
summary(sq_lm_model)
# Make predictions on the test set
predictions <- predict(sq_lm_model, newdata = dataTest)
# Calculate performance metrics on the test set
postResample(pred = predictions, obs = dataTest$total_electricity)
data_squared <- data_times %>%
mutate(sqr_temperature=temperature^2)
trainIndex <- createDataPartition(data_squared$total_electricity, p = .8,
list = FALSE,
times = 1)
dataTrain <- data_squared[ trainIndex,]
dataTest  <- data_squared[-trainIndex,]
# Train a linear regression model on the training set
sq_lm_model <- train(total_electricity ~ ., data = dataTrain, method = "lm", trControl = train_control)
# Print the results
summary(sq_lm_model)
# Make predictions on the test set
predictions <- predict(sq_lm_model, newdata = dataTest)
# Calculate performance metrics on the test set
postResample(pred = predictions, obs = dataTest$total_electricity)
data_pred <- data_times %>%
mutate(temperature=temperature+5)
predictions <- predict(lm_model,newdata = data_pred)
data_pred$total_electricity = exp(predictions)
View(data_pred)
git reset --hard origin/master
git checkout --orphan temp_branch
